# -*- coding:utf-8 -*-
# 作   者：Ailian
# 开发时间：2021/6/10 上午10:43


"""
1. fromkeys():创建并返回一个新的字典
    两个参数：键和值，第二个参数(值)不提供的话，默认为 None
    该方法不会改变原字典
"""

dict1 = {}
dict2 = dict1.fromkeys((1, 2, 3))  # 不会改变原字典，需要用一个变量来接
print(dict2)
dict3 = dict1.fromkeys((1, 2, 3), 'Number')  # 会把第二个参数当作所有键的值插入进去
print(dict3)
dict4 = dict1.fromkeys((1, 2, 3), ('one', 'two', 'three'))  # 会把第二个参数当成一个整体
print(dict4)


"""
2. keys()：获取字典的所有key
   value()：获取字典的所有value
   items()：
   dict_1.keys() 和 dict_1.values()不允许切片，需要先转成列表才能切片
"""
dict_1 = {'0': '赞', '1': '赞', '2': '赞', '3': '赞', '4': '赞', '5': '赞', '6': '赞', '7': '赞', '8': '赞', '9': '赞', '10': '赞',
          '11': '赞', '12': '赞', '13': '赞', '14': '赞', '15': '赞', }
print(list(dict_1.keys()))
print(list(dict_1.values()))
# print(dict_1[22])  # KeyError: 22
print('++++++++++++++++++++字典的get()方法+++++++++++++++++++++++')
"""
访问字典的像：通过字典的 key 获取值的时候，如果输入的 key 不存在，程序会报错，如果只是调试过程中报错，那么没有什么大问题，
但是，如果这是一个已经成熟的程序，用户使用的时候常常报错，那么用户肯定会体验不好
所以，字典的第三种方法出来了
3. get()：是一种比较宽松的访问字典的像的方法
   当使用get()方法试图访问不存在的像时，不会报错，而是返回一个 None（空对象）
   当使用get()方法试图访问不存在的像时，可以设置一个返回值
"""
print(dict_1.get('22'))  # None
print(dict_1.get('22', '木有！'))  # 设置返回值：木有！ 像不存在，返回 木有！
print(dict_1.get('11', '木有！'))  # 设置返回值：木有！ 像存在，返回 像的值

"""
在字典中检查键的成员资格，比序列更加高效，当数据量很大的时候，差距会很明显
4. in 查找的是键
在序列里面查找的是 值

"""
print('6' in dict_1)
print('16' in dict_1)

"""
5. clear()：清空字典
   通过将变量指向 一个空字典 来达到清空字典的效果，会有一定程度的危险性
   表面上看起来是清空了，实际上 字典还是存储在内存中，还是可以通过某些方法取出数据，如果里面存的是用户的一些账号信息，就会有可能被窃取
"""
a = {'name': '小甲鱼'}
b = a  # 把 b指向 a创建的字典对象
a = {}  # a指向空字典
print(a)  # 表面上看 a确实是为空字典
print(b)  # 但是 b 指向的字典对象还是存在的

# 如果使用clear()
a = b
a.clear()
print(a)
print(b)


"""
6. copy()：浅拷贝，拷贝字典，只是拷贝字典对象内容，创建一个新的对象（id和原来的不一样）
   如果是适用 = 进行赋值的，会把id和字典对象内容完全拷贝，即只是在 字典上多贴一个标签(变量名)
"""
d1 = {1: 'one', 2: 'two', 3: 'three'}   # id1
d2 = d1  # id1
d3 = d1.copy()  # id2
print(d1, id(d1))
print(d2, id(d2))
print(d3, id(d3))

d2[4] = 'four'  # d1新增一个键值对
print(d1, id(d1))  #
print(d2, id(d2))  # d2和d1指向的是同一个变量
print(d3, id(d3))


"""
7. pop()：给定键，移除对应的值和键，并且可以返回将被移除的像的 值
8. popitem()：随机从字典中移除一个像，并且可以以元组的形式 返回将被移除的像的键和值
"""
print('😂🤣😅🙂😘🤡😞😂😝🤔🙄🤗')
print(d1.pop(1))
print(d1)

print(d1.popitem())
print(d1)


"""
9. setdefault()：
   与get方法类型，当在字典中找不到对应的键的时候会自动添加
   传入两个参数，第一个参数是 键，第二个参数是 值
   如果不传入第二个参数，那么默认会为 None
   
"""
d1.setdefault('小白')
print(d1)
d1.setdefault(5, 'five')
print(d1)
b = {'小白': '狗'}
d1.update(b)
print(d1)
